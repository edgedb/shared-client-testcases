#!/usr/bin/env -S deno run --allow-all

// Using the location of this script file, iterate over all testcases
// in ../tests/ recursively and write them to `connection_testcases.json`.

import { lstatSync, readdirSync, readFileSync, writeFileSync } from "node:fs";
import { dirname, join } from "node:path";
import { jsonc } from "npm:jsonc";

function collectRecursively(base: string, path: string): string[] {
  const out: string[] = [];
  for (const name of readdirSync(join(base, path))) {
    if (name.endsWith(".jsonc")) {
      out.push(join(path, name));
    } else if (lstatSync(join(base, join(path, name))).isDirectory()) {
      out.push(...collectRecursively(base, join(path, name)));
    }
  }
  return out;
}

const scriptDir = dirname(new URL(import.meta.url).pathname);

const out: any[] = [];

const tests = join(scriptDir, "..", "tests");
console.log("Reading testcases from", tests);

for (const path of collectRecursively(tests, "")) {
  const testcases = jsonc.parse(readFileSync(join(tests, path), "utf8"));
  if (!Array.isArray(testcases)) {
    throw new Error(`Expected array of testcases in ${path}`);
  }
  for (const testcase of testcases) {
    testcase.name = path.replace("/", "_").replace(".jsonc", "") + "_" +
      testcase.name;
    out.push(testcase);
  }
}

function sortNumberAware(a: string, b: string): number {
  const aMatch = a.match(/^(.+?)_(\d+)$/);
  const bMatch = b.match(/^(.+?)_(\d+)$/);
  
  if (aMatch && bMatch && aMatch[1] === bMatch[1]) {
    // Same base name, compare numbers
    return parseInt(aMatch[2]) - parseInt(bMatch[2]);
  }
  
  // Default to string comparison
  return a.localeCompare(b);
}

// Sort by testcase.name, with numeric suffix handling
out.sort((a, b) => sortNumberAware(a.name, b.name));

function sortObjectKeys(key: string, value: any): any {
  if (value instanceof Object && !(value instanceof Array)) {
    return Object.keys(value)
      .sort()
      .reduce((sorted, key) => {
        sorted[key] = value[key];
        return sorted;
      }, {});
  }
  return value;
}

// Add pseudo-comments to the first and last testcase
const WARNING =
  "/*** WARNING: do not edit this file. This is automatically rebuilt using tools/rebuild.ts ***/";
out[0][" "] = WARNING;
out[out.length - 1]["~"] = WARNING;

writeFileSync(
  join(scriptDir, "..", "connection_testcases.json"),
  JSON.stringify(
    out,
    sortObjectKeys,
    2,
  ) + "\n",
);

console.log("Wrote", out.length, "testcases to", "connection_testcases.json");
